name: "pipeline-scan"

on:
  # Triggers the workflow on push or pull request events but only for the master branch 
    #  push:
    #branches: [ master ]

  pull_request:
    branches: [ master ]
  workflow_dispatch:
env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: test
jobs:
   codeql-scan:
    name: CodeQL-Scan
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: [ 'go' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v1

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö https://git.io/JvXDl

    # ‚úèÔ∏è If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
   license-scan:
    # The type of runner that the job will run on
    runs-on: [ ubuntu-latest ]
    needs: codeql-scan  
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Run clear
      run: |
        echo ${{ github.repository }}
        sudo rm -rf $PWD/reports
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: check out the repository
      uses: actions/checkout@v2
    - name: dep-scan
      uses: AppThreat/dep-scan-action@master
      env:
        VULNDB_HOME: ${{ github.workspace }}/db 
        GITHUB_TOKEN: ${{ secrets.GHE_TOKEN }}
    - name: upload artifact
      uses: actions/upload-artifact@v1
      with:
        name: reports-depscan
        path: reports
      #if: ${{ always() }} 

    - name: ls -l
      run: ls -l
   build-image:
    runs-on: ubuntu-latest
    needs: [codeql-scan,license-scan]
    steps:
    - name: Checkout the code
      uses: actions/checkout@v2
    - name: Build image
      run: docker build . --file Dockerfile2 --tag test:latest 
   anchore-scan-image:
    runs-on: ubuntu-latest
    needs: [build-image]
    steps:
    - name: Checkout the code
      uses: actions/checkout@v2
    - name: Build image
      run: docker build . --file Dockerfile2 --tag test:latest 
    - name: Run the local Scan Action with SARIF generation enabled
      id: scan
      uses: anchore/scan-action@v2
      with:
        image: "test:latest"
        debug: true
        acs-report-enable: true
        #fail-build: true
        #severity-cutoff: "Medium"

    - name: Inspect Generated SARIF
      run: cat ${{ steps.scan.outputs.sarif }}

    - name: ls
      run: ls -l
    - name: upload  scan SARIF report
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: ./results.sarif
   docker-images-push:
    # The type of runner that the job will run on      
    runs-on: [ ubuntu-latest ]

    needs: [license-scan,anchore-scan-image]
    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile2 --tag test:latest 

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
